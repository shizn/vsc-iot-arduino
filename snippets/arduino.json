{
	"abs": {
		"prefix": "abs",
		"body": "\nabs(${1:x});\n",
		"description": "Arduino abs()",
		"scope": "source.arduino"
	},
	"analogRead": {
		"prefix": "analogRead",
		"body": "\nanalogRead(${1:pin});\n",
		"description": "Arduino analogRead",
		"scope": "source.arduino"
	},
	"analogWrite": {
		"prefix": "analogWrite",
		"body": "\nanalogWrite(${1:pin}, ${2:value});\n",
		"description": "Arduino analogWrite",
		"scope": "source.arduino"
	},
	"attachInterrupt": {
		"prefix": "attachInterrupt",
		"body": "\nattachInterrupt(${1:interrupt}, ${2:function}, ${3:mode});\n",
		"description": "Arduino attachInterrupt()",
		"scope": "source.arduino"
	},
	"byte": {
		"prefix": "byte",
		"body": "\nbyte(${1:x});\n",
		"description": "Arduino byte()",
		"scope": "source.arduino"
	},
	"char": {
		"prefix": "char",
		"body": "\nchar(${1:x});\n",
		"description": "Arduino char()",
		"scope": "source.arduino"
	},
	"constrain": {
		"prefix": "constrain",
		"body": "\nconstrain(${1:x}, ${2:a}, ${3:b});\n",
		"description": "Arduino constrain()",
		"scope": "source.arduino"
	},
	"define": {
		"prefix": "define",
		"body": "\ndefine ${1:IDENTIFIER} ${2:string}\n",
		"description": "Arduino Macro define",
		"scope": "source.arduino"
	},
	"delay": {
		"prefix": "delay",
		"body": "\ndelay(${1:ms});\n",
		"description": "Arduino delay()",
		"scope": "source.arduino"
	},
	"delayMicroseconds": {
		"prefix": "delayMicroseconds",
		"body": "\ndelayMicroseconds(${1:us});\n",
		"description": "Arduino delayMicroseconds()",
		"scope": "source.arduino"
	},
	"detachInterrupt": {
		"prefix": "detachInterrupt",
		"body": "\ndetachInterrupt(${1:interrupt});\n",
		"description": "Arduino detachInterrupt()",
		"scope": "source.arduino"
	},
	"digitalRead": {
		"prefix": "digitalRead",
		"body": "\ndigitalRead(${1:pin});\n",
		"description": "Arduino digitalRead",
		"scope": "source.arduino"
	},
	"digitalWrite": {
		"prefix": "digitalWrite",
		"body": "\ndigitalWrite(${1:pin}, ${2:value});\n",
		"description": "Arduino digitalWrite",
		"scope": "source.arduino"
	},
	"dowihle": {
		"prefix": "dowihle",
		"body": "\ndo{\n    ${1:// statement block}\n} while (${2:test condition});\n\n",
		"description": "Arduino do-while",
		"scope": "source.arduino"
	},
	"float": {
		"prefix": "float",
		"body": "\nfloat(${1:x});\n",
		"description": "Arduino float()",
		"scope": "source.arduino"
	},
	"for": {
		"prefix": "for",
		"body": "\nfor(int ${1:i}=0; ${1:i}<${2}; ${1}++){\n    ${3}\n}\n",
		"description": "Arduino for",
		"scope": "source.arduino"
	},
	"if": {
		"prefix": "if",
		"body": "\nif(${1}){\n    ${2}\n}\n",
		"description": "Arduino if",
		"scope": "source.arduino"
	},
	"ifdef": {
		"prefix": "ifdef",
		"body": "\nifdef ${1:constant-expression}\n",
		"description": "Arduino Macro ifdef",
		"scope": "source.arduino"
	},
	"ifelse": {
		"prefix": "ifelse",
		"body": "\nif(${1:condition}){\n    ${2:// statement}\n} else {\n    ${3:// statement}\n}\n",
		"description": "Arduino if-else",
		"scope": "source.arduino"
	},
	"ifndef": {
		"prefix": "ifndef",
		"body": "\nifndef ${1:constant-expression}\n",
		"description": "Arduino Macro ifndef",
		"scope": "source.arduino"
	},
	"include": {
		"prefix": "include",
		"body": "\ninclude \"${1:lib.h}\"\n",
		"description": "Arduino include userlib",
		"scope": "source.arduino"
	},
	"include1": {
		"prefix": "include",
		"body": "\ninclude <${1:lib.h}>\n",
		"description": "Arduino include syslib",
		"scope": "source.arduino"
	},
	"int": {
		"prefix": "int",
		"body": "\nint(${1:x});\n",
		"description": "Arduino int()",
		"scope": "source.arduino"
	},
	"long": {
		"prefix": "long",
		"body": "\nlong(${1:x});\n",
		"description": "Arduino long()",
		"scope": "source.arduino"
	},
	"loop": {
		"prefix": "loop",
		"body": "void loop()\n{\n\t$1\n}\n",
		"description": "Arduino loop",
		"scope": "source.arduino"
	},
	"map": {
		"prefix": "map",
		"body": "\nmap(${1:value}, ${2:fromLow}, ${3:fromHigh}, ${4:toLow}, ${5:toHigh});\n",
		"description": "Arduino map()",
		"scope": "source.arduino"
	},
	"max": {
		"prefix": "max",
		"body": "\nmax(${1:x}, ${2:y});\n",
		"description": "Arduino max()",
		"scope": "source.arduino"
	},
	"elif": {
		"prefix": "elif",
		"body": "\nelif ${1:constant-expression}\n",
		"description": "Arduino Macro elif",
		"scope": "source.arduino"
	},
	"micros": {
		"prefix": "micros",
		"body": "\nmicros();\n",
		"description": "Arduino micros()",
		"scope": "source.arduino"
	},
	"if1": {
		"prefix": "if",
		"body": "\nif ${1:constant-expression}\n",
		"description": "Arduino Macro if",
		"scope": "source.arduino"
	},
	"millis": {
		"prefix": "millis",
		"body": "\nmillis();\n",
		"description": "Arduino millis()",
		"scope": "source.arduino"
	},
	"min": {
		"prefix": "min",
		"body": "\nmin(${1:x}, ${2:y});\n",
		"description": "Arduino min()",
		"scope": "source.arduino"
	},
	"noTone": {
		"prefix": "noTone",
		"body": "\nnoTone(${1:pin});\n",
		"description": "Arduino noTone()",
		"scope": "source.arduino"
	},
	"pinMode": {
		"prefix": "pinMode",
		"body": "\npinMode(${1:pin}, ${2:mode});\n",
		"description": "Arduino pinMode",
		"scope": "source.arduino"
	},
	"pow": {
		"prefix": "pow",
		"body": "\npow(${1:base}, ${2:exponent});\n",
		"description": "Arduino pow()",
		"scope": "source.arduino"
	},
	"pulseIn": {
		"prefix": "pulseIn",
		"body": "\npulseIn(${1:pin}, ${2:value}, ${3:timeout});\n",
		"description": "Arduino pulseIn()",
		"scope": "source.arduino"
	},
	"random": {
		"prefix": "random",
		"body": "\nrandom(${1:min}, ${2:max});\n",
		"description": "Arduino random()",
		"scope": "source.arduino"
	},
	"randomSeed": {
		"prefix": "randomSeed",
		"body": "\nrandomSeed(${1:seed});\n",
		"description": "Arduino randomSeed()",
		"scope": "source.arduino"
	},
	"savailable": {
		"prefix": "savailable",
		"body": "\nif (Serial.available() > ${1:0}) {\n    ${2}\n}\n",
		"description": "Arduino Serial.available()",
		"scope": "source.arduino"
	},
	"sbegin": {
		"prefix": "sbegin",
		"body": "\nSerial.begin(${1:9600});\n",
		"description": "Arduino Serial.begin()",
		"scope": "source.arduino"
	},
	"send": {
		"prefix": "send",
		"body": "\nSerial.end();\n",
		"description": "Arduino Serial.end()",
		"scope": "source.arduino"
	},
	"sevent": {
		"prefix": "sevent",
		"body": "\nvoid serialEvent(){\n    ${1://statements}\n}\n",
		"description": "Arduino serialEvent()",
		"scope": "source.arduino"
	},
	"sfind": {
		"prefix": "sfind",
		"body": "\nSerial.find(${1:target});\n",
		"description": "Arduino Serial.find()",
		"scope": "source.arduino"
	},
	"sfindUntil": {
		"prefix": "sfindUntil",
		"body": "\nSerial.findUntil(${1:target}, ${2:terminal});\n",
		"description": "Arduino Serial.findUntil()",
		"scope": "source.arduino"
	},
	"sflush": {
		"prefix": "sflush",
		"body": "\nSerial.flush();\n",
		"description": "Arduino Serial.flush()",
		"scope": "source.arduino"
	},
	"spfloat": {
		"prefix": "spfloat",
		"body": "\nSerial.parseFloat();\n",
		"description": "Arduino Serial.parseFloat()",
		"scope": "source.arduino"
	},
	"spint": {
		"prefix": "spint",
		"body": "\nSerial.parseInt();\n",
		"description": "Arduino Serial.parseInt()",
		"scope": "source.arduino"
	},
	"speek": {
		"prefix": "speek",
		"body": "\nSerial.peek();\n",
		"description": "Arduino Serial.peek()",
		"scope": "source.arduino"
	},
	"sprint": {
		"prefix": "sprint",
		"body": "\nSerial.print(${1:val}, ${2:format});\n",
		"description": "Arduino Serial.print()",
		"scope": "source.arduino"
	},
	"sprint1": {
		"prefix": "sprint",
		"body": "\nSerial.println(${1:val}, ${2:format});\n",
		"description": "Arduino Serial.println()",
		"scope": "source.arduino"
	},
	"sread": {
		"prefix": "sread",
		"body": "\nSerial.read();\n",
		"description": "Arduino Serial.read()",
		"scope": "source.arduino"
	},
	"sreadBytes": {
		"prefix": "sreadBytes",
		"body": "\nSerial.readBytes(${1:buffer}, ${2:length});\n",
		"description": "Arduino Serial.readBytes()",
		"scope": "source.arduino"
	},
	"sreadBytesUntil": {
		"prefix": "sreadBytesUntil",
		"body": "\nSerial.readBytesUntil(${1:character}, ${2:buffer}, ${2:length});\n",
		"description": "Arduino Serial.readBytesUntil()",
		"scope": "source.arduino"
	},
	"stimeout": {
		"prefix": "stimeout",
		"body": "\nSerial.setTimeout(${1:time});\n",
		"description": "Arduino Serial.setTimeout()",
		"scope": "source.arduino"
	},
	"swrite": {
		"prefix": "swrite",
		"body": "\nSerial.write(${1:data});\n",
		"description": "Arduino Serial.write()",
		"scope": "source.arduino"
	},
	"setup": {
		"prefix": "setup",
		"body": "void setup()\n{\n\t$1\n}\n",
		"description": "Arduino setup",
		"scope": "source.arduino"
	},
	"shiftIn": {
		"prefix": "shiftIn",
		"body": "\nshiftIn(${1:dataPin}, ${2:clockPin}, ${3:bitOrder});\n",
		"description": "Arduino shiftIn()",
		"scope": "source.arduino"
	},
	"shiftOut": {
		"prefix": "shiftOut",
		"body": "\nshiftOut(${1:dataPin}, ${2:clockPin}, ${3:bitOrder}, ${4:value});\n",
		"description": "Arduino shiftOut()",
		"scope": "source.arduino"
	},
	"sizeof": {
		"prefix": "sizeof",
		"body": "\nsizeof(${1:variable});\n",
		"description": "Arduino sizeof()",
		"scope": "source.arduino"
	},
	"sqrt": {
		"prefix": "sqrt",
		"body": "\nsqrt(${1:x});\n",
		"description": "Arduino sqrt()",
		"scope": "source.arduino"
	},
	"switch": {
		"prefix": "switch",
		"body": "\nswitch (${1}) {\n    case ${2}:\n      ${3:// do something}\n      break;\n    case ${4}:\n      ${5:// do something}\n      break;\n    default:\n      ${6:// do something}\n}\n",
		"description": "Arduino switch",
		"scope": "source.arduino"
	},
	"tone": {
		"prefix": "tone",
		"body": "\ntone(${1:pin}, ${2:frequency}, ${3:duration});\n",
		"description": "Arduino tone()",
		"scope": "source.arduino"
	},
	"undef": {
		"prefix": "undef",
		"body": "\nundef ${1:constant-expression}\n",
		"description": "Arduino Macro undef",
		"scope": "source.arduino"
	},
	"while": {
		"prefix": "while",
		"body": "\nwhile(${1}){\n    ${2:// statement}\n}\n",
		"description": "Arduino while",
		"scope": "source.arduino"
	}
}